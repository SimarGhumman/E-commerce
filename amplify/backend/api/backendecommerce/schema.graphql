type User @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username", operations: [read]}]) {
  id: ID!
  username: String!
  email: String!
  password: String
  shippingAddress: String
  billingAddress: String
  shoppingCart: ShoppingCart @hasOne
  orders: [Order] @hasMany
}

type Order @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username", operations: [create, read]}]) {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  user: User @belongsTo(fields: ["userID"])
  products: [ProductQuantity] @hasMany
  date: AWSDateTime!
  status: Status!
  totalPrice: Float!
}

type ShoppingCart @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username", operations: [create, read]}]) {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  user: User @belongsTo(fields: ["userID"])
  products: [ProductQuantity] @hasMany
}

type Product @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username", operations: [read]}]) {
  id: ID!
  name: String!
  description: String
  image: Image @hasOne
  price: Float!
  quantities: [ProductQuantity] @hasMany
}

type ProductQuantity @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username", operations: [create, read]}]) {
  id: ID!
  productID: ID!
  product: Product @belongsTo(fields: ["productID"])
  quantity: Int!
}

type Image @model @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: owner, ownerField: "username"}]) {
  id: ID!
  url: AWSURL!
  description: String
}

type Note @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  image: String
}

enum Status {
  PAYMENT_PENDING
  PAYMENT_COMPLETE
  SHIPPED
}
